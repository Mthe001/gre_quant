// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }





import type { Metadata } from "next";
import { ReactNode } from "react";
import {
  Space_Grotesk,
  Poppins,
  Inter,
  Roboto_Condensed,
  Montserrat,
  Lora,
  Playfair_Display_SC,
  Manrope,
  Open_Sans,
  Roboto,
  Oswald,
  Merriweather,
  Raleway,
  Nunito,
  Fira_Sans,
  Work_Sans,
  IBM_Plex_Sans,
  Rubik,
  Cabin,
  Barlow,
  Karla,
  PT_Sans,
} from "next/font/google";
import "./globals.css";

import Loading from "./loading";
import { ThemeProvider } from "../provider/theme-provider";
import Navbar from "../shared/Navbar";

import Footer from "../shared/Footer";
import LenisProvider from "../provider/lenis-provider";

// Define fonts with weights, subsets, and CSS variables
const spaceGrotesk = Space_Grotesk({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-space-grotesk",
});

const poppins = Poppins({
  subsets: ["latin"],
  weight: ["400", "600", "700"],
  variable: "--font-poppins",
});

const inter = Inter({
  subsets: ["latin"],
  weight: ["400", "500", "700"],
  variable: "--font-inter",
});

const robotoCondensed = Roboto_Condensed({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-roboto-condensed",
});

const montserrat = Montserrat({
  subsets: ["latin"],
  weight: ["400", "600", "800"],
  variable: "--font-montserrat",
});

const lora = Lora({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-lora",
});

const playfairDisplaySC = Playfair_Display_SC({
  subsets: ["latin"],
  weight: ["400", "700", "900"],
  variable: "--font-playfair-display-sc",
});

const manrope = Manrope({
  subsets: ["latin"],
  weight: ["400", "600", "800"],
  variable: "--font-manrope",
});

const openSans = Open_Sans({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-open-sans",
});

const roboto = Roboto({
  subsets: ["latin"],
  weight: ["400", "500", "700"],
  variable: "--font-roboto",
});

const oswald = Oswald({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-oswald",
});

const merriweather = Merriweather({
  subsets: ["latin"],
  weight: ["400", "700", "900"],
  variable: "--font-merriweather",
});

const raleway = Raleway({
  subsets: ["latin"],
  weight: ["400", "600", "800"],
  variable: "--font-raleway",
});

const nunito = Nunito({
  subsets: ["latin"],
  weight: ["400", "700", "800"],
  variable: "--font-nunito",
});

const firaSans = Fira_Sans({
  subsets: ["latin"],
  weight: ["400", "500", "700"],
  variable: "--font-fira-sans",
});

const workSans = Work_Sans({
  subsets: ["latin"],
  weight: ["400", "600", "800"],
  variable: "--font-work-sans",
});

const ibmPlexSans = IBM_Plex_Sans({
  subsets: ["latin"],
  weight: ["400", "500", "700"],
  variable: "--font-ibm-plex-sans",
});

const rubik = Rubik({
  subsets: ["latin"],
  weight: ["400", "700", "900"],
  variable: "--font-rubik",
});

const cabin = Cabin({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-cabin",
});

const barlow = Barlow({
  subsets: ["latin"],
  weight: ["400", "600", "800"],
  variable: "--font-barlow",
});

const karla = Karla({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-karla",
});

const ptSans = PT_Sans({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-pt-sans",
});

// Define props type for RootLayout
interface RootLayoutProps {
  children: ReactNode;
}

export const metadata: Metadata = {
  title: "GRE quant School",
  description:
    "GRE quant school",
  icons: {
    icon: "/favicon.ico",
  },
 
  
};


// Add viewport export for themeColor
export const viewport = {
  themeColor: "#000000",
};


export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head />
      <body
        className={`${spaceGrotesk.variable} ${poppins.variable} ${inter.variable} ${robotoCondensed.variable} ${montserrat.variable} ${lora.variable} ${playfairDisplaySC.variable} ${manrope.variable} ${openSans.variable} ${roboto.variable} ${oswald.variable} ${merriweather.variable} ${raleway.variable} ${nunito.variable} ${firaSans.variable} ${workSans.variable} ${ibmPlexSans.variable} ${rubik.variable} ${cabin.variable} ${barlow.variable} ${karla.variable} ${ptSans.variable}`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <Loading />
          {/* Navbar of GRE quant */}
          <section>
            <Navbar />
          </section>

          <LenisProvider>{children}</LenisProvider>

          {/* footer of GRE quant */}
          <section>
            <Footer />
          </section>
        </ThemeProvider>
      </body>
    </html>
  );
}